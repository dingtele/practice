import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Vector;
import java.util.stream.Collectors;


public class Stream {

	public int squareDigits(int n) {
	    return Integer.parseInt(String.valueOf(n)
	    		.chars()
	    		.map(x -> x - '0')
	    		.map(x -> x*x)
	    		.mapToObj(String::valueOf)
	    		.collect(Collectors.joining("")));
	    
	  }
	
	public static int[] deleteNth(int[] elements, int maxOccurrences)
	{
		
		for (int i = 0; i < elements.length; i++)
		{
			
			int count = 0;
			for(int j = i+1; j < elements.length-1-i; j++)
			{
				if (elements[i] == elements[j])
					count++;
					if(count >= maxOccurrences)
						elements[j] = elements[j+1];
			}
		}
		
		return elements;
	}
	
	public static int removeAndLength(int[] a, int elem)
	{
		int j = 0;
		
		for (int i = 0; i < a.length; i++)
		{
			if(a[i] == elem)
				continue;
			a[j] = a[i];
			j ++;
		}
		
		return j;
	}
	
	public static int removeSortedDuplicate(int[] a)
	{
		int j = 0;
		
		for (int i = 1; i < a.length; i++)
			if (a[j] != a[i])
				a[++j] = a[i];
			else continue;
		return j+1;
	}
	
	public static int removeSortedDuplicate2(int[] a)
	{
		int j = 0;
		int count = 0;
		
		for (int i = 1; i < a.length; i++) {
			if (a[j] == a[i]) {
				count++;
				if (count < 3)
					a[++j] = a[i];	
						
			} else { a[++j] = a[i];
						count++;	}
			
		}
		
		return j+1 ;
				
	}
	
	public static Object[] pulsOne(int[] a)
	{
		int sum = 0;
		Integer one = 0;

		LinkedList<Integer> res = new LinkedList<>();
		for (int i = a.length-1; i>=0; i--)
		{
			sum = a[i] + one;
			one = sum/10;
			Integer rest = sum % 10; 
			res.add(i, rest);
		}
		if (one > 0)
			res.addFirst(one);
		
		return res.toArray();
	}
	
	public static int[][] pascalTriangle(int numRows)
	{
		int[][] res = new int[numRows][numRows];
		res[0][0] = 1;
		for (int i = 0; i <= numRows; i++)
		{
			res[numRows][i] = res[numRows-1][i-1] + res[numRows-1][i+1];
		}
		
		return res;
	}
	
	
	public static void main(String[] args)
	{
		int numRows = 5;
		
		System.out.print(Stream.pascalTriangle(numRows));
	}
}






